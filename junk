// Function From Files

func (h *Handler) FnFromFilesGet(w http.ResponseWriter, r *http.Request) {
	h.templates.ExecuteTemplate(w, "fn_from_files.html", nil)
}

func (h *Handler) FnFromFilesPost(w http.ResponseWriter, r *http.Request) {
	var data struct {
		Files         string `json:"files"`
		TypeSelection string `json:"typeSelection"`
	}

	err := json.NewDecoder(r.Body).Decode(&data)
	if err != nil {
		fmt.Println("Error decoding JSON:", err)
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	// Validate textarea content
	if data.Files == "" {
		fmt.Println("Textarea 'files' content is empty!")
		http.Error(w, "Textarea content is required", http.StatusBadRequest)
		return
	}

	// Validate radio button selection
	if data.TypeSelection == "" {
		fmt.Println("No radio option selected!")
		http.Error(w, "Option selection is required", http.StatusBadRequest)
		return
	}

	fmt.Println("Selected Option:", data.TypeSelection)
	if data.TypeSelection == "fileOnly" {
		files := strings.Split(data.Files, "\n")
		filepath := "D:\\proj\\myshit\\MU_memory_analysis_tools\\Bins\\fn_from_files_go\\paths.txt"
		fileObj, _ := os.Create(filepath)
		for _, file := range files {
			file = utils.FindFile("D:/source codes/yed/YED_Z12E_E21A/", file)
			if file != "NotFound" {
				_, err = fileObj.WriteString(file)
				if err != nil {
					fmt.Println("error writing ", file)
				}
			}
		}

		cmd := exec.Command("./Bins/fn_from_files_go/funcfetch.exe")
		err = cmd.Run()
		if err != nil {
			fmt.Println("Failed To execute Func Fetch")
		} else {
			w.Header().Set("Content-Disposition", "attachment; filename=F_exc.xlsx")
			// w.Header().Set("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
			w.Header().Set("Content-Type", "application/octet-stream")
			http.ServeFile(w, r, "./F_exc.xslsx")
			fmt.Println("Function and its size extraction completed.")
		}

	} else if data.Files == "FileWithPath" {

	}
	// fmt.Println("Textarea Content:", data.Files)
	//
	// fmt.Fprintf(w, "Received content: %s, Selected option: %s", data.Files, data.TypeSelection)
}

// Fn From Files
	rout.HandleFunc("/FnFromFiles", Handle.FnFromFilesGet).Methods("GET")
	rout.HandleFunc("/FnFromFiles", Handle.FnFromFilesPost).Methods("POST")

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="/static/container.css">
    <title>Fn From Files</title>
</head>
<body>
    <div class="container">
        <form action="/FnFromFiles" method="POST" enctype="multipart/form-data">
            <div class="OptionDiv">
                <input type="radio" name="TypeSelection" value="fileOnly" id="Option">
                <label for="fileOnly">FileOnly</label><br>
                <input type="radio" name="TypeSelection" value="FileWithPath" id="Option">
                <label for="FileWithPath">FileWithPath</label>
            </div>
            <br>
            <div>
                <button>FetChFunc</button>
            </div>
            <br>
            <div class="FilesInputArea">
                <textarea name="files" cols="203" rows="50" style="overflow:auto;"></textarea>
            </div>
        </form>
    </div>
    <script src="/static/core.js"></script>
</body>
</html>

document.querySelector('form').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent default form submission

    // Get textarea content
    const textarea = document.querySelector('textarea[name="files"]');
    const content = textarea.value;

    if (!textarea.value.trim()) {
        alert('Textarea cannot be empty!');
        event.preventDefault();
        return;
    }

    // Get selected radio button
    const selectedRadio = document.querySelector('input[name="TypeSelection"]:checked');
    if (!selectedRadio) { // If no radio button is selected
        alert('Select at least one option');
        event.preventDefault();
        return;
    }

    const selectedOption = selectedRadio.value;

    // Send data using fetch
    fetch('/FnFromFiles', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ files: content, typeSelection: selectedOption })
    })
    .then(response => response.text())
    .then(data => console.log('Server Response:', data))
    .catch(error => console.error('Error:', error));
});

